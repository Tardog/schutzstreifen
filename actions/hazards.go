package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gofrs/uuid"
	"github.com/pkg/errors"
	"github.com/tardog/schutzstreifen/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Hazard)
// DB Table: Plural (hazards)
// Resource: Plural (Hazards)
// Path: Plural (/hazards)
// View Template Folder: Plural (/templates/hazards/)

// HazardsResource is the resource for the Hazard model
type HazardsResource struct {
	buffalo.Resource
}

// List gets all Hazards of the current user. This function is mapped to the path
// GET /hazards
func (v HazardsResource) List(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	hazards := &models.Hazards{}
	userID := c.Session().Get("current_user_id").(uuid.UUID)

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	if err := q.Eager("HazardType").Where("user_id = ?", userID).All(hazards); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, hazards))
}

// Show gets the data for one Hazard. This function is mapped to
// the path GET /hazards/{hazard_id}
func (v HazardsResource) Show(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	hazard := &models.Hazard{}
	userID := c.Session().Get("current_user_id").(uuid.UUID)

	if err := tx.Eager("HazardType").Where("user_id = ?", userID).Find(hazard, c.Param("hazard_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, hazard))
}

// New renders the form for creating a new Hazard.
// This function is mapped to the path GET /hazards/new
func (v HazardsResource) New(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	selectOptions, err := buildHazardTypeSelectOptions(tx)
	if err != nil {
		return c.Error(500, err)
	}

	c.Set("HazardTypes", selectOptions)

	return c.Render(200, r.Auto(c, &models.Hazard{}))
}

// Create adds a Hazard to the DB. This function is mapped to the
// path POST /hazards
func (v HazardsResource) Create(c buffalo.Context) error {
	hazard := &models.Hazard{}

	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	selectOptions, err := buildHazardTypeSelectOptions(tx)
	if err != nil {
		return c.Error(500, err)
	}

	c.Set("HazardTypes", selectOptions)

	if err := c.Bind(hazard); err != nil {
		return errors.WithStack(err)
	}

	hazard.UserID = c.Session().Get("current_user_id").(uuid.UUID)

	verrs, err := tx.ValidateAndCreate(hazard)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		for _, verr := range verrs.Errors {
			c.Flash().Add("error", verr[0])
		}

		return c.Render(422, r.Auto(c, hazard))
	}

	c.Flash().Add("success", "Hazard was created successfully")

	return c.Render(201, r.Auto(c, hazard))
}

// Edit renders a edit form for a Hazard. This function is
// mapped to the path GET /hazards/{hazard_id}/edit
func (v HazardsResource) Edit(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	hazard := &models.Hazard{}

	if err := tx.Find(hazard, c.Param("hazard_id")); err != nil {
		return c.Error(404, err)
	}

	selectOptions, err := buildHazardTypeSelectOptions(tx)
	if err != nil {
		return c.Error(500, err)
	}

	c.Set("HazardTypes", selectOptions)

	return c.Render(200, r.Auto(c, hazard))
}

// Update changes a Hazard in the DB. This function is mapped to
// the path PUT /hazards/{hazard_id}
func (v HazardsResource) Update(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	hazard := &models.Hazard{}

	selectOptions, err := buildHazardTypeSelectOptions(tx)
	if err != nil {
		return c.Error(500, err)
	}

	c.Set("HazardTypes", selectOptions)

	if err := tx.Find(hazard, c.Param("hazard_id")); err != nil {
		return c.Error(404, err)
	}

	if err := c.Bind(hazard); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(hazard)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		for _, verr := range verrs.Errors {
			c.Flash().Add("error", verr[0])
		}

		return c.Render(422, r.Auto(c, hazard))
	}

	c.Flash().Add("success", "Hazard was updated successfully")

	return c.Render(200, r.Auto(c, hazard))
}

// Destroy deletes a Hazard from the DB. This function is mapped
// to the path DELETE /hazards/{hazard_id}
func (v HazardsResource) Destroy(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	hazard := &models.Hazard{}

	if err := tx.Find(hazard, c.Param("hazard_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(hazard); err != nil {
		return errors.WithStack(err)
	}

	c.Flash().Add("success", "Hazard was destroyed successfully")

	return c.Render(200, r.Auto(c, hazard))
}

// Create a map of all hazard types for populating a select field
func buildHazardTypeSelectOptions(tx *pop.Connection) (map[string]interface{}, error) {
	hazardTypes := []models.HazardType{}

	err := tx.All(&hazardTypes)
	if err != nil {
		return nil, err
	}

	selectOptions := make(map[string]interface{})

	for _, hazardType := range hazardTypes {
		selectOptions[hazardType.Label] = hazardType.ID
	}

	return selectOptions, nil
}
